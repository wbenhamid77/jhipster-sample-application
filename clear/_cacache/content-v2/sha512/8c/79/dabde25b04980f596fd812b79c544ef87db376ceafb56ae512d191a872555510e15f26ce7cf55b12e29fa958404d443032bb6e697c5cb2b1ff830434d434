{"_id":"@jsonjoy.com/base64","_rev":"1-a1807fa4fbb779b1b382c481120af755","name":"@jsonjoy.com/base64","dist-tags":{"latest":"1.1.2"},"versions":{"1.1.1":{"name":"@jsonjoy.com/base64","private":false,"publishConfig":{"access":"public"},"version":"1.1.1","description":"High-performance Base64 encoder and decoder","author":{"name":"streamich","url":"https://github.com/streamich"},"homepage":"https://github.com/jsonjoy-com/base64","repository":{"type":"git","url":"git+https://github.com/jsonjoy-com/base64.git"},"funding":{"type":"github","url":"https://github.com/sponsors/streamich"},"keywords":["base64","base64url","base64-url","base64urlsafe","base64url-safe"],"engines":{"node":">=10.0"},"main":"lib/index.js","types":"lib/index.d.ts","typings":"lib/index.d.ts","scripts":{"prettier":"prettier --ignore-path .gitignore --write \"src/**/*.{ts,tsx,js,jsx}\"","prettier:check":"prettier --ignore-path .gitignore --list-different 'src/**/*.{ts,tsx,js,jsx}'","lint":"yarn tslint","tslint":"tslint 'src/**/*.{js,jsx,ts,tsx}' -t verbose --project .","clean":"rimraf lib typedocs coverage gh-pages yarn-error.log","build":"tsc --project tsconfig.build.json --module commonjs --target es2020 --outDir lib","jest":"node -r ts-node/register ./node_modules/.bin/jest","test":"jest --maxWorkers 7","test:ci":"yarn jest --maxWorkers 3 --no-cache","coverage":"yarn test --collectCoverage","typedoc":"typedoc","build:pages":"rimraf gh-pages && mkdir -p gh-pages && cp -r typedocs/* gh-pages && cp -r coverage gh-pages/coverage","deploy:pages":"gh-pages -d gh-pages","publish-coverage-and-typedocs":"yarn typedoc && yarn coverage && yarn build:pages && yarn deploy:pages"},"peerDependencies":{"tslib":"2"},"dependencies":{},"devDependencies":{"@types/benchmark":"^2.1.2","@types/jest":"^29.5.12","base64-js":"^1.5.1","benchmark":"^2.1.4","jest":"^29.7.0","js-base64":"^3.7.2","prettier":"^3.2.5","pretty-quick":"^3.1.3","rimraf":"^5.0.0","ts-jest":"^29.1.2","ts-node":"^10.9.2","tslib":"^2.6.2","tslint":"^6.1.3","tslint-config-common":"^1.6.2","typedoc":"^0.25.12","typescript":"^5.4.4"},"jest":{"verbose":true,"testEnvironmentOptions":{"url":"http://localhost/"},"setupFiles":["<rootDir>/src/__tests__/setup.js"],"moduleFileExtensions":["ts","js"],"transform":{"^.+\\.ts$":"ts-jest"},"transformIgnorePatterns":[],"testRegex":".*/(__tests__|__jest__|demo)/.*\\.(test|spec)\\.ts$"},"prettier":{"arrowParens":"always","printWidth":120,"tabWidth":2,"useTabs":false,"semi":true,"singleQuote":true,"trailingComma":"all","bracketSpacing":false},"release":{"branches":["master","next"]},"_id":"@jsonjoy.com/base64@1.1.1","gitHead":"a3c1d652ce9d1a00ae9972d23d988b0d3c8c09e4","bugs":{"url":"https://github.com/jsonjoy-com/base64/issues"},"_nodeVersion":"20.8.1","_npmVersion":"10.1.0","dist":{"integrity":"sha512-LnFjVChaGY8cZVMwAIMjvA1XwQjZ/zIXHyh28IyJkyNkzof4Dkm1+KN9UIm3lHhREH4vs7XwZ0NpkZKnwOtEfg==","shasum":"a717fd8840f7bad49c7fe66cc65db8bcfc4c4dc5","tarball":"https://registry.npmjs.org/@jsonjoy.com/base64/-/base64-1.1.1.tgz","fileCount":53,"unpackedSize":42975,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD4yEwJCr2bNkVMKmHTwytiWyq4yM0F258ivILxaXyNcgIgdcgnrlf66gONMxju7dKs5hzEmoEp6a8ooz8T8KsfN8Y="}]},"_npmUser":{"name":"streamich","email":"vadimsdaleckis@gmail.com"},"directories":{},"maintainers":[{"name":"json-joy-team","email":"team@jsonjoy.com"},{"name":"streamich","email":"vadimsdaleckis@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/base64_1.1.1_1712671373608_0.7640863930632242"},"_hasShrinkwrap":false},"1.1.2":{"name":"@jsonjoy.com/base64","private":false,"publishConfig":{"access":"public"},"version":"1.1.2","description":"High-performance Base64 encoder and decoder","author":{"name":"streamich","url":"https://github.com/streamich"},"homepage":"https://github.com/jsonjoy-com/base64","repository":{"type":"git","url":"git+https://github.com/jsonjoy-com/base64.git"},"license":"Apache-2.0","funding":{"type":"github","url":"https://github.com/sponsors/streamich"},"keywords":["base64","base64url","base64-url","base64urlsafe","base64url-safe"],"engines":{"node":">=10.0"},"main":"lib/index.js","types":"lib/index.d.ts","typings":"lib/index.d.ts","scripts":{"prettier":"prettier --ignore-path .gitignore --write \"src/**/*.{ts,tsx,js,jsx}\"","prettier:check":"prettier --ignore-path .gitignore --list-different 'src/**/*.{ts,tsx,js,jsx}'","lint":"yarn tslint","tslint":"tslint 'src/**/*.{js,jsx,ts,tsx}' -t verbose --project .","clean":"rimraf lib typedocs coverage gh-pages yarn-error.log","build":"tsc --project tsconfig.build.json --module commonjs --target es2020 --outDir lib","jest":"node -r ts-node/register ./node_modules/.bin/jest","test":"jest --maxWorkers 7","test:ci":"yarn jest --maxWorkers 3 --no-cache","coverage":"yarn test --collectCoverage","typedoc":"typedoc","build:pages":"rimraf gh-pages && mkdir -p gh-pages && cp -r typedocs/* gh-pages && cp -r coverage gh-pages/coverage","deploy:pages":"gh-pages -d gh-pages","publish-coverage-and-typedocs":"yarn typedoc && yarn coverage && yarn build:pages && yarn deploy:pages"},"peerDependencies":{"tslib":"2"},"dependencies":{},"devDependencies":{"@types/benchmark":"^2.1.2","@types/jest":"^29.5.12","base64-js":"^1.5.1","benchmark":"^2.1.4","jest":"^29.7.0","js-base64":"^3.7.2","prettier":"^3.2.5","pretty-quick":"^3.1.3","rimraf":"^5.0.0","ts-jest":"^29.1.2","ts-node":"^10.9.2","tslib":"^2.6.2","tslint":"^6.1.3","tslint-config-common":"^1.6.2","typedoc":"^0.25.12","typescript":"^5.4.4"},"jest":{"verbose":true,"testEnvironmentOptions":{"url":"http://localhost/"},"setupFiles":["<rootDir>/src/__tests__/setup.js"],"moduleFileExtensions":["ts","js"],"transform":{"^.+\\.ts$":"ts-jest"},"transformIgnorePatterns":[],"testRegex":".*/(__tests__|__jest__|demo)/.*\\.(test|spec)\\.ts$"},"prettier":{"arrowParens":"always","printWidth":120,"tabWidth":2,"useTabs":false,"semi":true,"singleQuote":true,"trailingComma":"all","bracketSpacing":false},"release":{"branches":["master","next"]},"_id":"@jsonjoy.com/base64@1.1.2","gitHead":"b35dba6dae15a66011e5a84c3ef9f2b2b89251b1","bugs":{"url":"https://github.com/jsonjoy-com/base64/issues"},"_nodeVersion":"20.8.1","_npmVersion":"10.1.0","dist":{"integrity":"sha512-q6XAnWQDIMA3+FTiOYajoYqySkO+JSat0ytXGSuRdq9uXE7o92gzuQwQM14xaCRlBLGq3v5miDGC4vkVTn54xA==","shasum":"cf8ea9dcb849b81c95f14fc0aaa151c6b54d2578","tarball":"https://registry.npmjs.org/@jsonjoy.com/base64/-/base64-1.1.2.tgz","fileCount":54,"unpackedSize":54343,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCcd5TtQv2lXemy3u/UCbeK5HLxXNlrWQoyl4+FoTb+fgIhANDjLxyyvOAJYmA2bGPd+jJKg0Nd67zTTsyk1cSU91Ef"}]},"_npmUser":{"name":"streamich","email":"vadimsdaleckis@gmail.com"},"directories":{},"maintainers":[{"name":"json-joy-team","email":"team@jsonjoy.com"},{"name":"streamich","email":"vadimsdaleckis@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/base64_1.1.2_1715158825591_0.04555186602982486"},"_hasShrinkwrap":false}},"time":{"created":"2024-04-09T14:02:53.523Z","1.1.1":"2024-04-09T14:02:53.777Z","modified":"2024-05-08T09:00:25.980Z","1.1.2":"2024-05-08T09:00:25.789Z"},"maintainers":[{"name":"json-joy-team","email":"team@jsonjoy.com"},{"name":"streamich","email":"vadimsdaleckis@gmail.com"}],"description":"High-performance Base64 encoder and decoder","homepage":"https://github.com/jsonjoy-com/base64","keywords":["base64","base64url","base64-url","base64urlsafe","base64url-safe"],"repository":{"type":"git","url":"git+https://github.com/jsonjoy-com/base64.git"},"author":{"name":"streamich","url":"https://github.com/streamich"},"bugs":{"url":"https://github.com/jsonjoy-com/base64/issues"},"readme":"# Base64\n\nFast Base64 encoder and decoder for browser and Node.js.\n\n## Encoder\n\n- Implements Base64 encoding algorithm compatible with Node's Buffer.\n- Isomorphic&mdash;it can be used in, both, Node and the browser.\n- Faster than the Node's implementation for short blobs, smaller than 40 bytes.\n- Uses Node's implementation for long blobs, if available. Hence, it also works\n  in browser, but in Node environment will perform faster for short strings.\n- Can encode into Base64 text or Base64 `Uint8Array`.\n\n\n### Usage\n\nUse encoder compatible with Node's Buffer:\n\n```ts\nimport {toBase64} from '@jsonjoy.com/base64';\n\ntoBase64(new Uint8Array([1, 2, 3]));\n```\n\nCreate your custom encoder:\n\n```ts\nimport {createToBase64} from '@jsonjoy.com/base64';\n\nconst encode = createToBase64('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+_');\n\nencode(new Uint8Array([1, 2, 3]));\n```\n\n\n### Benchmark\n\nBelow benchmark encodes random binary blobs of sizes 8, 16, 32, 64, 128, 256, 512, and 1024 byes.\n`@jsonjoy.com/base64` is faster, because for short strings (less than 40 chars) it uses a\nnative JavaScript implementation, which is faster and also works in browsers. For blobs larger\nthan 40 chars, it falls back to Node `Buffer` implementation, if available.\n\nEncoding:\n\n```\nnode src/__bench__/encode.js\nutil/base64 toBase64(uint8) x 1,531,283 ops/sec ±0.30% (92 runs sampled), 653 ns/op\nutil/base64 createToBase64()(uint8) x 946,364 ops/sec ±0.76% (100 runs sampled), 1057 ns/op\njs-base64 x 1,103,190 ops/sec ±1.27% (96 runs sampled), 906 ns/op\nfast-base64-encode x 500,225 ops/sec ±0.64% (96 runs sampled), 1999 ns/op\nbase64-js x 328,368 ops/sec ±0.25% (95 runs sampled), 3045 ns/op\nBuffer.from(uint8).toString('base64'); x 1,099,420 ops/sec ±0.20% (100 runs sampled), 910 ns/op\nFastest is util/base64 toBase64(uint8)\n```\n\nDecoding:\n\n```\nnode src/__bench__/decode.js\n@jsonjoy.com/base64 fromBase64(str) x 756,989 ops/sec ±0.46% (97 runs sampled), 1321 ns/op\n@jsonjoy.com/base64 createFromBase64()(str) x 475,591 ops/sec ±0.37% (96 runs sampled), 2103 ns/op\nBuffer.from(str, 'base64') x 545,012 ops/sec ±0.33% (101 runs sampled), 1835 ns/op\nbase64-js x 487,015 ops/sec ±1.19% (94 runs sampled), 2053 ns/op\njs-base64 x 173,049 ops/sec ±0.20% (99 runs sampled), 5779 ns/op\nFastest is @jsonjoy.com/base64 fromBase64(str)\n```\n\n\n## Decoder\n\n- Uses Node.js built-in `Buffer`, if available.\n- When `Buffer` is not available, uses JavaScript implementation.\n\n\n### Usage\n\nUse decoder compatible with Node's Buffer:\n\n```ts\nimport {toBase64, fromBase64} from '@jsonjoy.com/base64';\n\nfromBase64(toBase64(new Uint8Array([1, 2, 3])));\n```\n\nCreate your custom encoder:\n\n```ts\nimport {createFromBase64} from '@jsonjoy.com/base64';\n\nconst decoder = createFromBase64('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+_');\n\ndecoder(toBase64(new Uint8Array([1, 2, 3])));\n```\n","readmeFilename":"README.md","license":"Apache-2.0"}